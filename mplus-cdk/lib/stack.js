"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applySecurityGroupRulesToSource = exports.T3Stack = void 0;
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const uuid_1 = require("uuid");
/**
 * Base class to use for all T3 Stacks
 */
class T3Stack extends cdk.Stack {
    // declare securityGroup: ec2.SecurityGroup;
    constructor(scope, props) {
        const stackName = [props.clientId, props.deployEnv, props.service].filter(Boolean).join('-');
        super(scope, stackName, Object.assign(Object.assign({}, props), { 
            // Explicitly provide account and region for SSM access (vpc)
            env: {
                // account: cdk.Aws.ACCOUNT_ID,
                // region: cdk.Aws.REGION,
                account: props.account,
                region: props.region,
            } }));
        this.clientId = props.clientId;
        this.deployEnv = props.deployEnv;
        this.service = props.service;
        this._addBillingTags(props.clientJobCode || 'n/a');
    }
    _addBillingTags(clientJobCode) {
        // Tag all resources in the stack with the given key/value pairs
        cdk.Tags.of(this).add('CLIENT_ID', this.clientId);
        cdk.Tags.of(this).add('CLIENT_JOB_CODE', clientJobCode);
        cdk.Tags.of(this).add('CLIENT_DEPLOY_ENV', this.deployEnv);
        cdk.Tags.of(this).add('CI_MAINTAINED', 'true');
    }
    existingVpc(vpcId) {
        // Expects that the referenced Vpc exists with the corresponding vpcId
        // If param=vpcId is not passed, the stack will try to lookup by deployEnv the vpc created via IaC (if any)
        return aws_cdk_lib_1.aws_ec2.Vpc.fromLookup(this, 'ImportVpc', {
            vpcId: vpcId ? vpcId : aws_cdk_lib_1.aws_ssm.StringParameter.valueFromLookup(this, `/Vpc-${this.deployEnv}/VpcId`)
        });
    }
    kmsKey(kmsKeyArn, props) {
        if (kmsKeyArn) {
            return aws_cdk_lib_1.aws_kms.Key.fromKeyArn(this, 'KmsKey', kmsKeyArn);
        }
        return new aws_cdk_lib_1.aws_kms.Key(this, 'KmsKey', props);
    }
    stackOutput(key, value) {
        // const exportName = `${this.clientId}-${this.service}-${this.deployEnv}-${key}`;
        new cdk.CfnOutput(this, key + 'Export', {
            value: value,
            exportName: key,
        });
    }
}
exports.T3Stack = T3Stack;
function applySecurityGroupRulesToSource(scope, accessSecurityGroups = [], sourceSecurityGroup) {
    if (accessSecurityGroups && accessSecurityGroups.length > 0) {
        accessSecurityGroups.forEach(accessSecurityGroup => {
            const targetSecurityGroup = aws_cdk_lib_1.aws_ec2.SecurityGroup.fromSecurityGroupId(scope, `SG-${accessSecurityGroup.service}${(0, uuid_1.v4)().replace(/-/g, '')}`, accessSecurityGroup.securityGroupId);
            targetSecurityGroup.connections.allowFrom(targetSecurityGroup, accessSecurityGroup.port, `${accessSecurityGroup.description} from ${sourceSecurityGroup.service}`);
        });
    }
}
exports.applySecurityGroupRulesToSource = applySecurityGroupRulesToSource;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBbUM7QUFDbkMsNkNBSXFCO0FBQ3JCLCtCQUFrQztBQXNCbEM7O0dBRUc7QUFDSCxNQUFhLE9BQVEsU0FBUSxHQUFHLENBQUMsS0FBSztJQUlsQyw0Q0FBNEM7SUFFNUMsWUFBWSxLQUFnQixFQUFFLEtBQW1CO1FBQzdDLE1BQU0sU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdGLEtBQUssQ0FBQyxLQUFLLEVBQUUsU0FBUyxrQ0FDZixLQUFLO1lBQ1IsNkRBQTZEO1lBQzdELEdBQUcsRUFBRTtnQkFDRCwrQkFBK0I7Z0JBQy9CLDBCQUEwQjtnQkFDMUIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO2dCQUN0QixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07YUFDdkIsSUFDSCxDQUFDO1FBQ0gsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFTyxlQUFlLENBQUMsYUFBcUI7UUFDekMsZ0VBQWdFO1FBQ2hFLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xELEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN4RCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzNELEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFjO1FBQ3RCLHNFQUFzRTtRQUN0RSwyR0FBMkc7UUFDM0csT0FBTyxxQkFBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBQztZQUN4QyxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHFCQUFHLENBQUMsZUFBZSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUMsUUFBUSxJQUFJLENBQUMsU0FBUyxRQUFRLENBQUM7U0FDbEcsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFrQixFQUFFLEtBQW9CO1FBQzNDLElBQUksU0FBUyxFQUFFO1lBQ1gsT0FBTyxxQkFBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUN4RDtRQUNELE9BQU8sSUFBSSxxQkFBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCxXQUFXLENBQUMsR0FBVyxFQUFFLEtBQWE7UUFDbEMsa0ZBQWtGO1FBQ2xGLElBQUksR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxHQUFDLFFBQVEsRUFBRTtZQUNsQyxLQUFLLEVBQUUsS0FBSztZQUNaLFVBQVUsRUFBRSxHQUFHO1NBQ2xCLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQXRERCwwQkFzREM7QUFjRCxTQUFnQiwrQkFBK0IsQ0FBQyxLQUFVLEVBQUUsdUJBQThDLEVBQUUsRUFBRSxtQkFBd0M7SUFDbEosSUFBSSxvQkFBb0IsSUFBSSxvQkFBb0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3pELG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO1lBQy9DLE1BQU0sbUJBQW1CLEdBQUcscUJBQUcsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsS0FBSyxFQUFFLE1BQU0sbUJBQW1CLENBQUMsT0FBTyxHQUFHLElBQUEsU0FBTSxHQUFFLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLG1CQUFtQixDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBQ2hMLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLEVBQUUsbUJBQW1CLENBQUMsSUFBSSxFQUFFLEdBQUcsbUJBQW1CLENBQUMsV0FBVyxTQUFTLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFDdEssQ0FBQyxDQUFDLENBQUM7S0FDTjtBQUNMLENBQUM7QUFQRCwwRUFPQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29uc3RydWN0fSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQge1xuICAgIGF3c19lYzIgYXMgZWMyLFxuICAgIGF3c19rbXMgYXMga21zLFxuICAgIGF3c19zc20gYXMgc3NtXG59IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHt2NCBhcyB1dWlkdjR9IGZyb20gJ3V1aWQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFQzU3RhY2tQcm9wcyBleHRlbmRzIGNkay5TdGFja1Byb3BzIHtcbiAgICByZWFkb25seSBhY2NvdW50OiBzdHJpbmdcbiAgICByZWFkb25seSByZWdpb246IHN0cmluZ1xuXG4gICAgcmVhZG9ubHkgY2xpZW50SWQ6IHN0cmluZ1xuICAgIHJlYWRvbmx5IGNsaWVudEpvYkNvZGU/OiBzdHJpbmdcblxuICAgIC8qKlxuICAgICAqIFJlcXVpcmVkIHRvIGNyZWF0ZSB1bmlxdWUgSURzIHdoZW4gcnVubmluZyBtdWx0aXBsZSBkZXBsb3lFbnZzIGluIHRoZSBzYW1lIHRlbmFudC5cbiAgICAgKiBkZXBsb3lFbnY6IFtkZXZvcHMsIGRldiwgc3RhZ2UsIHByb2QsIG1haW4sIGV0Y11cbiAgICAgKi9cbiAgICByZWFkb25seSBkZXBsb3lFbnY6IHN0cmluZ1xuXG4gICAgLyoqXG4gICAgICogVXNlZCBwcmltYXJpbHkgdG8gY3JlYXRlIHVuaXF1ZSBjb25zdHJ1Y3QgSURzIHRvIG1pdGlnYXRlIHJlc291cmNlIGNvbGxpc2lvbnMgYmV0d2VlbiBzaW1pbGFyIHN0YWNrcy5cbiAgICAgKiBzZXJ2aWNlOiBbY29kZVBpcGVsaW5lLCBzcGEsIHdlYiwgZXRjXVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHNlcnZpY2U6IHN0cmluZ1xufVxuXG4vKipcbiAqIEJhc2UgY2xhc3MgdG8gdXNlIGZvciBhbGwgVDMgU3RhY2tzXG4gKi9cbmV4cG9ydCBjbGFzcyBUM1N0YWNrIGV4dGVuZHMgY2RrLlN0YWNrIHtcbiAgICByZWFkb25seSBjbGllbnRJZDogc3RyaW5nXG4gICAgcmVhZG9ubHkgZGVwbG95RW52OiBzdHJpbmdcbiAgICByZWFkb25seSBzZXJ2aWNlOiBzdHJpbmdcbiAgICAvLyBkZWNsYXJlIHNlY3VyaXR5R3JvdXA6IGVjMi5TZWN1cml0eUdyb3VwO1xuXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgcHJvcHM6IFQzU3RhY2tQcm9wcykge1xuICAgICAgICBjb25zdCBzdGFja05hbWUgPSBbcHJvcHMuY2xpZW50SWQsIHByb3BzLmRlcGxveUVudiwgcHJvcHMuc2VydmljZV0uZmlsdGVyKEJvb2xlYW4pLmpvaW4oJy0nKTtcbiAgICAgICAgc3VwZXIoc2NvcGUsIHN0YWNrTmFtZSwge1xuICAgICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgICAvLyBFeHBsaWNpdGx5IHByb3ZpZGUgYWNjb3VudCBhbmQgcmVnaW9uIGZvciBTU00gYWNjZXNzICh2cGMpXG4gICAgICAgICAgICBlbnY6IHtcbiAgICAgICAgICAgICAgICAvLyBhY2NvdW50OiBjZGsuQXdzLkFDQ09VTlRfSUQsXG4gICAgICAgICAgICAgICAgLy8gcmVnaW9uOiBjZGsuQXdzLlJFR0lPTixcbiAgICAgICAgICAgICAgICBhY2NvdW50OiBwcm9wcy5hY2NvdW50LFxuICAgICAgICAgICAgICAgIHJlZ2lvbjogcHJvcHMucmVnaW9uLFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IHByb3BzLmNsaWVudElkO1xuICAgICAgICB0aGlzLmRlcGxveUVudiA9IHByb3BzLmRlcGxveUVudjtcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gcHJvcHMuc2VydmljZTtcbiAgICAgICAgdGhpcy5fYWRkQmlsbGluZ1RhZ3MocHJvcHMuY2xpZW50Sm9iQ29kZSB8fCAnbi9hJyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfYWRkQmlsbGluZ1RhZ3MoY2xpZW50Sm9iQ29kZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIC8vIFRhZyBhbGwgcmVzb3VyY2VzIGluIHRoZSBzdGFjayB3aXRoIHRoZSBnaXZlbiBrZXkvdmFsdWUgcGFpcnNcbiAgICAgICAgY2RrLlRhZ3Mub2YodGhpcykuYWRkKCdDTElFTlRfSUQnLCB0aGlzLmNsaWVudElkKTtcbiAgICAgICAgY2RrLlRhZ3Mub2YodGhpcykuYWRkKCdDTElFTlRfSk9CX0NPREUnLCBjbGllbnRKb2JDb2RlKTtcbiAgICAgICAgY2RrLlRhZ3Mub2YodGhpcykuYWRkKCdDTElFTlRfREVQTE9ZX0VOVicsIHRoaXMuZGVwbG95RW52KTtcbiAgICAgICAgY2RrLlRhZ3Mub2YodGhpcykuYWRkKCdDSV9NQUlOVEFJTkVEJywgJ3RydWUnKTtcbiAgICB9XG5cbiAgICBleGlzdGluZ1ZwYyh2cGNJZD86IHN0cmluZyk6IGVjMi5JVnBjIHtcbiAgICAgICAgLy8gRXhwZWN0cyB0aGF0IHRoZSByZWZlcmVuY2VkIFZwYyBleGlzdHMgd2l0aCB0aGUgY29ycmVzcG9uZGluZyB2cGNJZFxuICAgICAgICAvLyBJZiBwYXJhbT12cGNJZCBpcyBub3QgcGFzc2VkLCB0aGUgc3RhY2sgd2lsbCB0cnkgdG8gbG9va3VwIGJ5IGRlcGxveUVudiB0aGUgdnBjIGNyZWF0ZWQgdmlhIElhQyAoaWYgYW55KVxuICAgICAgICByZXR1cm4gZWMyLlZwYy5mcm9tTG9va3VwKHRoaXMsICdJbXBvcnRWcGMnLHtcbiAgICAgICAgICAgIHZwY0lkOiB2cGNJZCA/IHZwY0lkIDogc3NtLlN0cmluZ1BhcmFtZXRlci52YWx1ZUZyb21Mb29rdXAodGhpcyxgL1ZwYy0ke3RoaXMuZGVwbG95RW52fS9WcGNJZGApXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGttc0tleShrbXNLZXlBcm4/OiBzdHJpbmcsIHByb3BzPzoga21zLktleVByb3BzKToga21zLktleXxrbXMuSUtleSB7XG4gICAgICAgIGlmIChrbXNLZXlBcm4pIHtcbiAgICAgICAgICAgIHJldHVybiBrbXMuS2V5LmZyb21LZXlBcm4odGhpcywgJ0ttc0tleScsIGttc0tleUFybik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBrbXMuS2V5KHRoaXMsICdLbXNLZXknLCBwcm9wcyk7XG4gICAgfVxuXG4gICAgc3RhY2tPdXRwdXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gY29uc3QgZXhwb3J0TmFtZSA9IGAke3RoaXMuY2xpZW50SWR9LSR7dGhpcy5zZXJ2aWNlfS0ke3RoaXMuZGVwbG95RW52fS0ke2tleX1gO1xuICAgICAgICBuZXcgY2RrLkNmbk91dHB1dCh0aGlzLCBrZXkrJ0V4cG9ydCcsIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIGV4cG9ydE5hbWU6IGtleSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjY2Vzc1NlY3VyaXR5R3JvdXAge1xuICAgIHNlcnZpY2U6IHN0cmluZ1xuICAgIHNlY3VyaXR5R3JvdXBJZDogc3RyaW5nXG4gICAgcG9ydDogZWMyLlBvcnRcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU291cmNlU2VjdXJpdHlHcm91cCB7XG4gICAgc2VydmljZTogc3RyaW5nXG4gICAgc2VjdXJpdHlHcm91cElkOiBzdHJpbmdcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5U2VjdXJpdHlHcm91cFJ1bGVzVG9Tb3VyY2Uoc2NvcGU6IGFueSwgYWNjZXNzU2VjdXJpdHlHcm91cHM6IEFjY2Vzc1NlY3VyaXR5R3JvdXBbXSA9IFtdLCBzb3VyY2VTZWN1cml0eUdyb3VwOiBTb3VyY2VTZWN1cml0eUdyb3VwKSB7XG4gICAgaWYgKGFjY2Vzc1NlY3VyaXR5R3JvdXBzICYmIGFjY2Vzc1NlY3VyaXR5R3JvdXBzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYWNjZXNzU2VjdXJpdHlHcm91cHMuZm9yRWFjaChhY2Nlc3NTZWN1cml0eUdyb3VwID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFNlY3VyaXR5R3JvdXAgPSBlYzIuU2VjdXJpdHlHcm91cC5mcm9tU2VjdXJpdHlHcm91cElkKHNjb3BlLCBgU0ctJHthY2Nlc3NTZWN1cml0eUdyb3VwLnNlcnZpY2V9JHt1dWlkdjQoKS5yZXBsYWNlKC8tL2csICcnKX1gLCBhY2Nlc3NTZWN1cml0eUdyb3VwLnNlY3VyaXR5R3JvdXBJZCk7XG4gICAgICAgICAgICB0YXJnZXRTZWN1cml0eUdyb3VwLmNvbm5lY3Rpb25zLmFsbG93RnJvbSh0YXJnZXRTZWN1cml0eUdyb3VwLCBhY2Nlc3NTZWN1cml0eUdyb3VwLnBvcnQsIGAke2FjY2Vzc1NlY3VyaXR5R3JvdXAuZGVzY3JpcHRpb259IGZyb20gJHtzb3VyY2VTZWN1cml0eUdyb3VwLnNlcnZpY2V9YClcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19