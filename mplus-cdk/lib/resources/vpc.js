"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.naclRules = exports.interfaceEndpoints = exports.flowLogs = exports.vpcInit = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const nacl_1 = require("./nacl");
function vpcInit(stack, props) {
    // A Virtual Private Cloud runs everything in a private context. The
    // instances inside it can talk to each other via the private subnet, but
    // to connect to the open Internet, a gateway and security groups are needed.
    const constructId = 'Vpc';
    let vpcProps = {
        ipAddresses: aws_cdk_lib_1.aws_ec2.IpAddresses.cidr('10.0.0.0/16'),
        natGateways: 1,
        maxAzs: 3,
        subnetConfiguration: [
            {
                name: `${constructId}Public`,
                subnetType: aws_cdk_lib_1.aws_ec2.SubnetType.PUBLIC,
            },
            {
                name: `${constructId}PrivateWithEgress`,
                subnetType: aws_cdk_lib_1.aws_ec2.SubnetType.PRIVATE_WITH_EGRESS,
            },
            {
                name: `${constructId}PrivateIsolated`,
                subnetType: aws_cdk_lib_1.aws_ec2.SubnetType.PRIVATE_ISOLATED,
            },
        ],
    };
    // Nat Gateway
    let natGatewayProvider;
    if (!props.natGatewayEip) {
        natGatewayProvider = aws_cdk_lib_1.aws_ec2.NatProvider.gateway({ eipAllocationIds: undefined });
    }
    else {
        natGatewayProvider = aws_cdk_lib_1.aws_ec2.NatProvider.gateway({ eipAllocationIds: [props.natGatewayEip] });
    }
    vpcProps = Object.assign(Object.assign({}, vpcProps), { natGatewayProvider: natGatewayProvider });
    return new aws_cdk_lib_1.aws_ec2.Vpc(stack, constructId, vpcProps);
}
exports.vpcInit = vpcInit;
function flowLogs(stack, props) {
    // Setup IAM user for logs
    const flowRole = new aws_cdk_lib_1.aws_iam.Role(stack, 'FlowLog', {
        assumedBy: new aws_cdk_lib_1.aws_iam.ServicePrincipal('vpc-flow-logs.amazonaws.com')
    });
    // Setup VPC flow logs
    new aws_cdk_lib_1.aws_ec2.CfnFlowLog(stack, 'FlowLogs', {
        resourceId: props.vpc.vpcId,
        resourceType: 'VPC',
        trafficType: 'ALL',
        deliverLogsPermissionArn: flowRole.roleArn,
        logDestinationType: 'cloud-watch-logs',
        logGroupName: props.logGroup.logGroupName
    });
}
exports.flowLogs = flowLogs;
/**
 * Builds VPC endpoints to access AWS services without using NAT Gateway.
 */
function interfaceEndpoints(vpc) {
    // Allow ECS to pull Docker images without using NAT Gateway
    // https://docs.aws.amazon.com/AmazonECR/latest/userguide/vpc-endpoints.html
    _addInterfaceEndpoint(vpc, "ECRDockerEndpoint", aws_cdk_lib_1.aws_ec2.InterfaceVpcEndpointAwsService.ECR_DOCKER);
    _addInterfaceEndpoint(vpc, "ECREndpoint", aws_cdk_lib_1.aws_ec2.InterfaceVpcEndpointAwsService.ECR);
    _addInterfaceEndpoint(vpc, "ElastiCache", aws_cdk_lib_1.aws_ec2.InterfaceVpcEndpointAwsService.ELASTICACHE);
    _addInterfaceEndpoint(vpc, "SecretManagerEndpoint", aws_cdk_lib_1.aws_ec2.InterfaceVpcEndpointAwsService.SECRETS_MANAGER);
    // _addInterfaceEndpoint(vpc, "CloudWatchEndpoint", ec2.InterfaceVpcEndpointAwsService.CLOUDWATCH);
    // _addInterfaceEndpoint(vpc, "CloudWatchLogsEndpoint", ec2.InterfaceVpcEndpointAwsService.CLOUDWATCH_LOGS);
    // _addInterfaceEndpoint(vpc, "CloudWatchEventsEndpoint", ec2.InterfaceVpcEndpointAwsService.CLOUDWATCH_EVENTS);
    _addInterfaceEndpoint(vpc, "SSMEndpoint", aws_cdk_lib_1.aws_ec2.InterfaceVpcEndpointAwsService.SSM);
}
exports.interfaceEndpoints = interfaceEndpoints;
function _addInterfaceEndpoint(vpc, name, awsService) {
    const endpoint = vpc.addInterfaceEndpoint(`${name}`, {
        service: awsService
    });
    endpoint.connections.allowFrom(aws_cdk_lib_1.aws_ec2.Peer.ipv4(vpc.vpcCidrBlock), endpoint.connections.defaultPort);
}
/** Nacl Rules **/
function naclRules(stack, vpc) {
    /** Nacl restrict Public subnet */
    const publicNacl = new aws_cdk_lib_1.aws_ec2.NetworkAcl(stack, 'PublicNacl', {
        vpc: vpc,
        networkAclName: 'PublicNacl',
        subnetSelection: { subnetType: aws_cdk_lib_1.aws_ec2.SubnetType.PUBLIC }
    });
    (0, nacl_1.addNaclRules)(publicNacl);
    /** Nacl restrict Private subnet */
    const privateNacl = new aws_cdk_lib_1.aws_ec2.NetworkAcl(stack, 'PrivateNacl', {
        vpc: vpc,
        networkAclName: 'PrivateNacl',
        subnetSelection: { subnetType: aws_cdk_lib_1.aws_ec2.SubnetType.PRIVATE_WITH_EGRESS }
    });
    (0, nacl_1.addNaclRules)(privateNacl);
}
exports.naclRules = naclRules;
//# sourceMappingURL=data:application/json;base64,