"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addNaclRules = exports.outboundRules = exports.inboundRules = void 0;
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const aws_cdk_lib_1 = require("aws-cdk-lib");
exports.inboundRules = [
    {
        name: "AllowHTTPipv4Ingress",
        ruleNumber: 100,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv4('0.0.0.0/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPort(80),
        direction: aws_ec2_1.TrafficDirection.INGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows inbound HTTP traffic from any IPv4 address."
    },
    {
        name: "AllowHTTPipv6Ingress",
        ruleNumber: 105,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv6('::/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPort(80),
        direction: aws_ec2_1.TrafficDirection.INGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows inbound HTTP traffic from any IPv6 address."
    },
    {
        name: "AllowHTTPSipv4Ingress",
        ruleNumber: 110,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv4('0.0.0.0/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPort(443),
        direction: aws_ec2_1.TrafficDirection.INGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows inbound HTTPS traffic from any IPv4 address."
    },
    {
        name: "AllowHTTPSipv6Ingress",
        ruleNumber: 115,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv6('::/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPort(443),
        direction: aws_ec2_1.TrafficDirection.INGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows inbound HTTPS traffic from any IPv6 address."
    },
    {
        name: "AllowSSHipv4Ingress",
        ruleNumber: 120,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv4('0.0.0.0/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPort(22),
        direction: aws_ec2_1.TrafficDirection.INGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows inbound SSH traffic from any IPv4 address."
    },
    {
        name: "AllowCustomTCPipv4Ingress",
        ruleNumber: 140,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv4('0.0.0.0/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPortRange(1024, 65535),
        direction: aws_ec2_1.TrafficDirection.INGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows inbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet)."
    },
    {
        name: "AllowCustomTCPipv6Ingress",
        ruleNumber: 145,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv6('::/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPortRange(1024, 65535),
        direction: aws_ec2_1.TrafficDirection.INGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows inbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet)."
    },
    {
        name: "AllowUDPipv4Ingress",
        ruleNumber: 300,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv4('0.0.0.0/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.udpPort(53),
        direction: aws_ec2_1.TrafficDirection.INGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows inbound return IPv4 traffic from udp"
    },
    {
        name: "AllowUDPipv6Ingress",
        ruleNumber: 400,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv6('::/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.udpPort(53),
        direction: aws_ec2_1.TrafficDirection.INGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows inbound return IPv6 traffic from udp"
    },
    {
        name: "DenyAllTrafficipv4Ingress",
        ruleNumber: 500,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv4('0.0.0.0/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.allTraffic(),
        direction: aws_ec2_1.TrafficDirection.INGRESS,
        ruleAction: aws_ec2_1.Action.DENY,
        comment: "Allows inbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet)."
    },
    {
        name: "DenyAllTrafficipv6Ingress",
        ruleNumber: 505,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv6('::/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.allTraffic(),
        direction: aws_ec2_1.TrafficDirection.INGRESS,
        ruleAction: aws_ec2_1.Action.DENY,
        comment: "Allows inbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet)."
    }
];
exports.outboundRules = [
    {
        name: "AllowHTTPipv4Egress",
        ruleNumber: 100,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv4('0.0.0.0/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPort(80),
        direction: aws_ec2_1.TrafficDirection.EGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows outbound HTTP traffic from any IPv4 address."
    },
    {
        name: "AllowHTTPipv6Egress",
        ruleNumber: 105,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv6('::/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPort(80),
        direction: aws_ec2_1.TrafficDirection.EGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows outbound HTTP traffic from any IPv6 address."
    },
    {
        name: "AllowHTTPSipv4Egress",
        ruleNumber: 110,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv4('0.0.0.0/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPort(443),
        direction: aws_ec2_1.TrafficDirection.EGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows outbound HTTPS traffic from any IPv4 address."
    },
    {
        name: "AllowHTTPSipv6Egress",
        ruleNumber: 115,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv6('::/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPort(443),
        direction: aws_ec2_1.TrafficDirection.EGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows outbound HTTPS traffic from any IPv6 address."
    },
    {
        name: "AllowSSHipv4Egress",
        ruleNumber: 120,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv4('0.0.0.0/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPort(22),
        direction: aws_ec2_1.TrafficDirection.EGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows outbound SSH traffic from any IPv4 address."
    },
    {
        name: "AllowCustomTCPipv4Egress",
        ruleNumber: 140,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv4('0.0.0.0/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPortRange(1024, 65535),
        direction: aws_ec2_1.TrafficDirection.EGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows outbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet)."
    },
    {
        name: "AllowCustomTCPipv6Egress",
        ruleNumber: 145,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv6('::/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.tcpPortRange(1024, 65535),
        direction: aws_ec2_1.TrafficDirection.EGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows outbound return IPv6 traffic from the internet (that is, for requests that originate in the subnet)."
    },
    {
        name: "AllowUDPipv4Egress",
        ruleNumber: 300,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv4('0.0.0.0/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.udpPort(53),
        direction: aws_ec2_1.TrafficDirection.EGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows inbound return IPv4 traffic from udp"
    },
    {
        name: "AllowUDPipv6Egress",
        ruleNumber: 400,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv6('::/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.udpPort(53),
        direction: aws_ec2_1.TrafficDirection.EGRESS,
        ruleAction: aws_ec2_1.Action.ALLOW,
        comment: "Allows inbound return IPv6 traffic from udp"
    },
    {
        name: "DenyAllTrafficipv4Egress",
        ruleNumber: 500,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv4('0.0.0.0/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.allTraffic(),
        direction: aws_ec2_1.TrafficDirection.EGRESS,
        ruleAction: aws_ec2_1.Action.DENY,
        comment: "Allows outbound return IPv4 traffic from the internet (that is, for requests that originate in the subnet)."
    },
    {
        name: "DenyAllTrafficipv6Egress",
        ruleNumber: 505,
        cidr: aws_cdk_lib_1.aws_ec2.AclCidr.ipv6('::/0'),
        traffic: aws_cdk_lib_1.aws_ec2.AclTraffic.allTraffic(),
        direction: aws_ec2_1.TrafficDirection.EGRESS,
        ruleAction: aws_ec2_1.Action.DENY,
        comment: "Allows outbound return IPv6 traffic from the internet (that is, for requests that originate in the subnet)."
    }
];
function addNaclRules(nacl) {
    const rules = [...exports.inboundRules, ...exports.outboundRules];
    rules.forEach((rule) => {
        nacl.addEntry(rule.name, {
            ruleNumber: rule.ruleNumber,
            ruleAction: rule.ruleAction,
            cidr: rule.cidr,
            traffic: rule.traffic,
            direction: rule.direction
        });
    });
}
exports.addNaclRules = addNaclRules;
//# sourceMappingURL=data:application/json;base64,