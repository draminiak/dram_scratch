"use strict";
/**
 * Set RdsPostgresStackProps.databaseName to create a new DB instance; else existingDbConfig.databaseName is used.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.rdsAccessProps = exports.RdsPostgresStack = exports.RDS_POSTGRES_DEFAULTS = void 0;
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const stack_1 = require("../stack");
exports.RDS_POSTGRES_DEFAULTS = {
    instanceClass: aws_cdk_lib_1.aws_ec2.InstanceClass.BURSTABLE3,
    instanceSize: aws_cdk_lib_1.aws_ec2.InstanceSize.MICRO,
    pgVersion: aws_cdk_lib_1.aws_rds.PostgresEngineVersion.VER_15_3,
};
/** Class RdsPostgresStack **/
class RdsPostgresStack extends stack_1.T3Stack {
    constructor(scope, props) {
        super(scope, props);
        this.databaseName = props.existingDbConfig ? props.existingDbConfig.databaseName : props.databaseName;
        this.instanceClass = props.instanceClass || exports.RDS_POSTGRES_DEFAULTS.instanceClass;
        this.instanceSize = props.instanceSize || exports.RDS_POSTGRES_DEFAULTS.instanceSize;
        this.pgVersion = props.pgVersion || exports.RDS_POSTGRES_DEFAULTS.pgVersion;
        const vpc = props.vpc || this.existingVpc(props.vpcId);
        const kmsKey = this.kmsKey(props.kmsKeyArn, {
            alias: `${this.service}-${this.deployEnv}`,
        });
        // Security Group ID From Export
        const securityGroupId = cdk.Fn.importValue(`${this.stackName}-SecurityGroupId`);
        const securityGroup = aws_cdk_lib_1.aws_ec2.SecurityGroup.fromSecurityGroupId(this, 'RdsSg', securityGroupId);
        this.securityGroupId = securityGroup.securityGroupId;
        if (props.existingDbConfig) {
            this.database = aws_cdk_lib_1.aws_rds.DatabaseInstance.fromDatabaseInstanceAttributes(this, 'RdsPostgresFromAttr', Object.assign(Object.assign({}, props.existingDbConfig), { securityGroups: [securityGroup] }));
            this.securityGroupId = props.existingDbConfig.clusterSecurityGroup;
            this.credentials = {
                username: props.existingDbConfig.secretUsr,
                password: props.existingDbConfig.secretPwd
            };
        }
        else {
            const dbUsername = this.databaseName;
            this.database = new aws_cdk_lib_1.aws_rds.DatabaseInstance(this, 'RdsPostgresDatabase', {
                vpc,
                vpcSubnets: vpc.selectSubnets({
                    subnetType: aws_cdk_lib_1.aws_ec2.SubnetType.PRIVATE_ISOLATED
                }),
                engine: aws_cdk_lib_1.aws_rds.DatabaseInstanceEngine.postgres({
                    version: this.pgVersion
                }),
                instanceType: aws_cdk_lib_1.aws_ec2.InstanceType.of(this.instanceClass, this.instanceSize),
                databaseName: this.databaseName,
                // create db credentials on the fly and store them in Secrets Manager
                credentials: aws_cdk_lib_1.aws_rds.Credentials.fromGeneratedSecret(dbUsername),
                multiAz: true,
                allocatedStorage: 100,
                maxAllocatedStorage: 120,
                allowMajorVersionUpgrade: false,
                autoMinorVersionUpgrade: true,
                backupRetention: cdk.Duration.days(3),
                cloudwatchLogsRetention: aws_cdk_lib_1.aws_logs.RetentionDays.ONE_MONTH,
                deleteAutomatedBackups: true,
                deletionProtection: true,
                removalPolicy: cdk.RemovalPolicy.RETAIN,
                publiclyAccessible: false,
                storageEncryptionKey: kmsKey,
                performanceInsightEncryptionKey: kmsKey,
                // parameterGroup: new rds.ParameterGroup(this, 'ClusterParameterGroup', {
                //     engine: rds.DatabaseClusterEngine.auroraPostgres({ version: this.pgVersion}),
                //     parameters: {
                //         'rds.force_ssl': '1',
                //     },
                // }),
                securityGroups: [securityGroup],
            });
        }
        this.setExports();
    }
    dbUsername() {
        if (this.database instanceof aws_cdk_lib_1.aws_rds.DatabaseInstance) {
            return aws_cdk_lib_1.aws_ecs.Secret.fromSecretsManager(this.database.secret, "username");
        }
        else {
            return this.credentials.username;
        }
    }
    dbPassword() {
        if (this.database instanceof aws_cdk_lib_1.aws_rds.DatabaseInstance) {
            return aws_cdk_lib_1.aws_ecs.Secret.fromSecretsManager(this.database.secret, "password");
        }
        else {
            return this.credentials.password;
        }
    }
    setExports() {
        // RDS Instance identifier
        // TODO : value incorrectly set as "[object Object]" for existing instances
        new cdk.CfnOutput(this, `RDSInstanceIdentifier-${this.deployEnv}`, {
            value: this.database.instanceIdentifier,
            exportName: `${this.stackName}-exportRdsInstanceId`,
        });
    }
}
exports.RdsPostgresStack = RdsPostgresStack;
function rdsAccessProps(clientId, deployEnv, service) {
    return {
        service: service,
        securityGroupId: cdk.Fn.importValue(`${clientId}-${deployEnv}-${service}-SecurityGroupId`),
        port: aws_cdk_lib_1.aws_ec2.Port.tcp(5432),
        description: `Access to Rds ${deployEnv}`
    };
}
exports.rdsAccessProps = rdsAccessProps;
//# sourceMappingURL=data:application/json;base64,