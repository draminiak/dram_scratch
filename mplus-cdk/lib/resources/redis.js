"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.redisAccessProps = exports.RedisStack = void 0;
const cdk = require("aws-cdk-lib");
const stack_1 = require("../stack");
const aws_cdk_lib_1 = require("aws-cdk-lib");
/** Class RedisStack **/
class RedisStack extends stack_1.T3Stack {
    constructor(scope, props) {
        super(scope, props);
        const vpc = props.vpc || this.existingVpc(props.vpcId);
        // Security Group ID From Export
        const securityGroupId = cdk.Fn.importValue(`${this.stackName}-SecurityGroupId`);
        // SubnetGroup
        this.subnetGroup = new aws_cdk_lib_1.aws_elasticache.CfnSubnetGroup(this, 'SubnetGroup', {
            description: "redis subnet",
            subnetIds: vpc.privateSubnets.map((subnet) => {
                return subnet.subnetId;
            }),
        });
        // ReplicationGroup
        let replicationGroupProps = {
            replicationGroupDescription: `${props.service} cluster`,
            replicasPerNodeGroup: 1,
            numNodeGroups: 3,
            engine: "redis",
            cacheNodeType: props.cacheNodeType,
            multiAzEnabled: true,
            cacheSubnetGroupName: this.subnetGroup.ref,
            securityGroupIds: [securityGroupId],
        };
        this.replicationGroup = new aws_cdk_lib_1.aws_elasticache.CfnReplicationGroup(this, 'ReplicaGroup', replicationGroupProps);
    }
}
exports.RedisStack = RedisStack;
function redisAccessProps(clientId, deployEnv, service) {
    return {
        service: service,
        securityGroupId: cdk.Fn.importValue(`${clientId}-${deployEnv}-${service}-SecurityGroupId`),
        port: aws_cdk_lib_1.aws_ec2.Port.tcp(6379),
        description: `Access to Redis ${deployEnv}`
    };
}
exports.redisAccessProps = redisAccessProps;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZWRpcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtQ0FBbUM7QUFDbkMsb0NBQW9FO0FBQ3BFLDZDQUdxQjtBQVlyQix3QkFBd0I7QUFDeEIsTUFBYSxVQUFXLFNBQVEsZUFBTztJQUluQyxZQUFZLEtBQWMsRUFBRSxLQUFzQjtRQUM5QyxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3BCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdkQsZ0NBQWdDO1FBQ2hDLE1BQU0sZUFBZSxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsa0JBQWtCLENBQUMsQ0FBQztRQUVoRixjQUFjO1FBQ2QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLDZCQUFXLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxhQUFhLEVBQUU7WUFDbkUsV0FBVyxFQUFFLGNBQWM7WUFDM0IsU0FBUyxFQUFFLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQ3pDLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQTtZQUMxQixDQUFDLENBQUM7U0FDTCxDQUFDLENBQUM7UUFFSCxtQkFBbUI7UUFDbkIsSUFBSSxxQkFBcUIsR0FBeUM7WUFDOUQsMkJBQTJCLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxVQUFVO1lBQ3ZELG9CQUFvQixFQUFFLENBQUM7WUFDdkIsYUFBYSxFQUFFLENBQUM7WUFDaEIsTUFBTSxFQUFFLE9BQU87WUFDZixhQUFhLEVBQUUsS0FBSyxDQUFDLGFBQWE7WUFDbEMsY0FBYyxFQUFFLElBQUk7WUFDcEIsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHO1lBQzFDLGdCQUFnQixFQUFFLENBQUMsZUFBZSxDQUFDO1NBQ3RDLENBQUM7UUFDRixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSw2QkFBVyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxjQUFjLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUM3RyxDQUFDO0NBQ0o7QUFoQ0QsZ0NBZ0NDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsUUFBZ0IsRUFBRSxTQUFpQixFQUFFLE9BQWU7SUFDakYsT0FBTztRQUNILE9BQU8sRUFBRSxPQUFPO1FBQ2hCLGVBQWUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxHQUFHLFFBQVEsSUFBSSxTQUFTLElBQUksT0FBTyxrQkFBa0IsQ0FBQztRQUMxRixJQUFJLEVBQUUscUJBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQztRQUN4QixXQUFXLEVBQUUsbUJBQW1CLFNBQVMsRUFBRTtLQUM5QyxDQUFDO0FBQ04sQ0FBQztBQVBELDRDQU9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHtBY2Nlc3NTZWN1cml0eUdyb3VwLCBUM1N0YWNrLCBUM1N0YWNrUHJvcHN9IGZyb20gXCIuLi9zdGFja1wiO1xuaW1wb3J0IHtcbiAgICBhd3NfZWMyIGFzIGVjMixcbiAgICBhd3NfZWxhc3RpY2FjaGUgYXMgZWxhc3RpY2FjaGUsXG59IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuXG4vKiogSW50ZXJmYWNlcyAqKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVkaXNTdGFja1Byb3BzIGV4dGVuZHMgVDNTdGFja1Byb3BzIHtcbiAgICByZWFkb25seSBhdXRoVG9rZW46IHN0cmluZ1xuICAgIHJlYWRvbmx5IGNhY2hlTm9kZVR5cGU6IHN0cmluZ1xuICAgIHJlYWRvbmx5IG51bU5vZGVHcm91cHM6IG51bWJlclxuICAgIHJlYWRvbmx5IHJlcGxpY2FzUGVyTm9kZUdyb3VwOiBudW1iZXJcbiAgICByZWFkb25seSB2cGM/OiBlYzIuVnBjXG4gICAgcmVhZG9ubHkgdnBjSWQ/OiBzdHJpbmdcbn1cblxuLyoqIENsYXNzIFJlZGlzU3RhY2sgKiovXG5leHBvcnQgY2xhc3MgUmVkaXNTdGFjayBleHRlbmRzIFQzU3RhY2sge1xuICAgIGRlY2xhcmUgc3VibmV0R3JvdXA6IGVsYXN0aWNhY2hlLkNmblN1Ym5ldEdyb3VwXG4gICAgZGVjbGFyZSByZXBsaWNhdGlvbkdyb3VwOiBlbGFzdGljYWNoZS5DZm5SZXBsaWNhdGlvbkdyb3VwXG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkFwcCwgcHJvcHM6IFJlZGlzU3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgcHJvcHMpO1xuICAgICAgICBjb25zdCB2cGMgPSBwcm9wcy52cGMgfHwgdGhpcy5leGlzdGluZ1ZwYyhwcm9wcy52cGNJZCk7XG5cbiAgICAgICAgLy8gU2VjdXJpdHkgR3JvdXAgSUQgRnJvbSBFeHBvcnRcbiAgICAgICAgY29uc3Qgc2VjdXJpdHlHcm91cElkID0gY2RrLkZuLmltcG9ydFZhbHVlKGAke3RoaXMuc3RhY2tOYW1lfS1TZWN1cml0eUdyb3VwSWRgKTtcblxuICAgICAgICAvLyBTdWJuZXRHcm91cFxuICAgICAgICB0aGlzLnN1Ym5ldEdyb3VwID0gbmV3IGVsYXN0aWNhY2hlLkNmblN1Ym5ldEdyb3VwKHRoaXMsICdTdWJuZXRHcm91cCcsIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcInJlZGlzIHN1Ym5ldFwiLFxuICAgICAgICAgICAgc3VibmV0SWRzOiB2cGMucHJpdmF0ZVN1Ym5ldHMubWFwKChzdWJuZXQpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VibmV0LnN1Ym5ldElkXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gUmVwbGljYXRpb25Hcm91cFxuICAgICAgICBsZXQgcmVwbGljYXRpb25Hcm91cFByb3BzOiBlbGFzdGljYWNoZS5DZm5SZXBsaWNhdGlvbkdyb3VwUHJvcHMgPSB7XG4gICAgICAgICAgICByZXBsaWNhdGlvbkdyb3VwRGVzY3JpcHRpb246IGAke3Byb3BzLnNlcnZpY2V9IGNsdXN0ZXJgLFxuICAgICAgICAgICAgcmVwbGljYXNQZXJOb2RlR3JvdXA6IDEsXG4gICAgICAgICAgICBudW1Ob2RlR3JvdXBzOiAzLFxuICAgICAgICAgICAgZW5naW5lOiBcInJlZGlzXCIsXG4gICAgICAgICAgICBjYWNoZU5vZGVUeXBlOiBwcm9wcy5jYWNoZU5vZGVUeXBlLFxuICAgICAgICAgICAgbXVsdGlBekVuYWJsZWQ6IHRydWUsXG4gICAgICAgICAgICBjYWNoZVN1Ym5ldEdyb3VwTmFtZTogdGhpcy5zdWJuZXRHcm91cC5yZWYsXG4gICAgICAgICAgICBzZWN1cml0eUdyb3VwSWRzOiBbc2VjdXJpdHlHcm91cElkXSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZXBsaWNhdGlvbkdyb3VwID0gbmV3IGVsYXN0aWNhY2hlLkNmblJlcGxpY2F0aW9uR3JvdXAodGhpcywgJ1JlcGxpY2FHcm91cCcsIHJlcGxpY2F0aW9uR3JvdXBQcm9wcyk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVkaXNBY2Nlc3NQcm9wcyhjbGllbnRJZDogc3RyaW5nLCBkZXBsb3lFbnY6IHN0cmluZywgc2VydmljZTogc3RyaW5nKTogQWNjZXNzU2VjdXJpdHlHcm91cCB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VydmljZTogc2VydmljZSxcbiAgICAgICAgc2VjdXJpdHlHcm91cElkOiBjZGsuRm4uaW1wb3J0VmFsdWUoYCR7Y2xpZW50SWR9LSR7ZGVwbG95RW52fS0ke3NlcnZpY2V9LVNlY3VyaXR5R3JvdXBJZGApLFxuICAgICAgICBwb3J0OiBlYzIuUG9ydC50Y3AoNjM3OSksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBgQWNjZXNzIHRvIFJlZGlzICR7ZGVwbG95RW52fWBcbiAgICB9O1xufVxuIl19