version: 0.2

env:
  git-credential-helper: yes

  # NOTE : pipeline.ts converts this yaml to json and adds things like variables (i.e. DEPLOY_ENV) and secrets (i.e. INFRA_CONFIG_GROUP)

  variables:
    TEST_VAR: 'foo'

  secrets-manager:
    TEST_SECRET: 'bar'

    # Infra vars
#    INFRA_CONFIG_GROUP: 'INFRA_CONFIG_GROUP--SET-DYNAMICALLY-IN-CDK'

phases:

  install:
    runtime-versions:
      nodejs: 14.x
    commands:
      - n 16.13.2

      # CI/CD
      - yarn install:from-lock
# TODO : Trivy
#      - yarn trivy:install

  pre_build:
    on-failure: ABORT
    commands:
      - echo pre-build stage

      # CI/CD
#      - yarn version-set
#      - yarn install:dev-from-lock
#      - yarn lint
#      - yarn audit

      # Use basicAuth if not branch=master|main
#      - |
#        if [ "$ENVIRONMENT" != "main" ]; then
#          yarn --cwd ci react-web:middleware
#        fi
#      - yarn --cwd $WEB_DIR build

      # Storybook (can only deploy to us-east-1)
#      - |
#        if [ "$AWS_REGION" = "us-east-1" ]; then
#          yarn --cwd $WEB_DIR build-storybook
#        fi

# TODO : Trivy
#      - yarn vulnerabilityScan:file-system
#      - yarn build:ts

  build:
    on-failure: ABORT
    commands:
      - echo build stage
#      - export AWS_ECR_DOMAIN=${AWS_ECR_DOMAIN}
#      - export AWS_ECR_REPO=${AWS_ECR_REPO}
#      - yarn --cwd ci docker:login
#      - yarn --cwd ci aws:ecr-login
#
#      - AWS_DOCKER_TAG_SKU_IMPORT=SKU-IMPORT-v${CODEBUILD_BUILD_NUMBER}
#      - AWS_DOCKER_TAG_DEALER_IMPORT=DEALER-IMPORT-v${CODEBUILD_BUILD_NUMBER}
#      - AWS_DOCKER_TAG_FITMENT_IMPORT=FITMENT-IMPORT-v${CODEBUILD_BUILD_NUMBER}
#      - AWS_DOCKER_TAG_API=API-v${CODEBUILD_BUILD_NUMBER}
##      - AWS_DOCKER_TAG_WEB=WEB-v${CODEBUILD_BUILD_NUMBER}
#
#      - AWS_DOCKER_TAG_LATEST=v${CODEBUILD_BUILD_NUMBER}
#
#      - uname -a
#      - set -e
#      - ./ci/bin/build.sh

# TODO : Trivy
      # We are getting rate-limited in the pipeline pulling the vulnerability DB for Trivy from Github.
      # There are several workarounds, but adding a GITHUB_TOKEN to the env seems like the easiest solve.
#      - yarn --cwd ci vulnerabilityScan:container ${AWS_ECR_DOMAIN}/${AWS_ECR_REPO}:${AWS_DOCKER_TAG_WEB}
#      - yarn --cwd ci vulnerabilityScan:container ${AWS_ECR_DOMAIN}/${AWS_ECR_REPO}:${AWS_DOCKER_TAG_API}
#      - yarn --cwd ci vulnerabilityScan:container ${AWS_ECR_DOMAIN}/${AWS_ECR_REPO}:${AWS_DOCKER_TAG_SKU_IMPORT}
#      - yarn --cwd ci vulnerabilityScan:container ${AWS_ECR_DOMAIN}/${AWS_ECR_REPO}:${AWS_DOCKER_TAG_DEALER_IMPORT}

  post_build:
    commands:
      - '[ ${CODEBUILD_BUILD_SUCCEEDING:-0} -eq 1 ] || exit 1'
      - echo post-build stage

      # CI/CD
#      - yarn aws:cli-install
#      - aws --version
#      - yarn aws:config


#artifacts:
#  files:
#    - $BUILD_DIR

cache:
  paths:
    - '*/**/node_modules/**/*'
    - '*/**/.yarn-cache/**/*'
